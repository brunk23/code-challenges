1 rem	-----	find the prime factors of a number

10 rem	-----	get a number
12 input a

20 rem	-----	if we can't divide, jump to 80 to get next factor
22 let c = a % 2
24 if c != 0 goto 80

30 rem	-----	we could divide, print this factor and reduce a by it
34 print 2
38 let a = a / 2

40 rem	-----	if a > 1, we need to find the next factor back to 30
44 if a > 1 goto 20

50 rem	-----	a == 1, we're done, halt
54 end

60 rem	-----	if our current factor is 2, add 1, else add two and
61 rem	-----	then go back to 30 and try again
62 rem	-----	This is what sort of code you get when you increment
63 rem	-----	constants, 2 == 1 is SOMETIMES true! Because 2 is not
64 rem	-----	guaranteed to hold the value of 2.

80 dec 2
82 if 2 == 1 goto 90
85 inc 2
90 inc 2
91 inc 2
92 goto 20

100 rem	 -----	It should be noted that we can't do "if 2 == 2 goto 90"
101 rem	 -----	in the above test, because that will always be true.